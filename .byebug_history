c
cc
c
@things
@thing
n
c
n
Thing.not_linked(Image.first)
Thing.not_linked(image)
@things
n
exit
Thing.not_linked
@things
n
image
n
c
images[0]
images
c
n
response.body
n
count
c
n
cls
images[0]["id"]
images[0]
images
response.body
n
count
c
Image.find(id: thing_image.image_id).exists?
n
thing_image
thing_image.save
thing_image
thing_image.creator_id = current_user.id
thing_image
thing_image.creator_id = current_user
thing_image
c
rake routes | /thing_image/
thing_thing_images_path
jpost thing_thing_images_path(thing["id"]), thing_image_props
current_user
user
c
cc
c
Exot
Exit
c
cc
c
response.status
response
c
factory
path
c
parsed_body["image_id"]
parsed_body.image
parsed_body
response.status
response.status.to_s
response.status
n
jpost path, FactoryGirl.attributes_for(factory)
c
jpost path, FactoryGirl.attributes_for(factory)
c
n
response.body
response
jpost path, FactoryGirl.attributes_for(factory)
exit
c
response.status
n
image.attributes
image.thing_image
image.thing
image
c
nc
n
thing_image.save
thing_image
c
image
thing_image_props
thing
c
n
response.body
response
thing_image_props
Thing.find(thing["id"])
Thing.all
n
params
n
self.send
self
n
params
n
FactoryGirl.attributes_for(:thing_image, :image_id=>image["id"])
c
ti.image.things
ti.image.thing
ti.image
ti
c
ti.image.things.first === thing
ti.image.things.first
expect(ti).to be_persited
ti
thing.save
ti
c
pp Thing.all
Thing.all
Thing.find(thing_id)
n
c
n
list
n
c
exception.message
exception.methods
exception.errors
exception
c
params[:thing]
params[:thing
params
thing_params
c
FactoryGirl.attributes_for(:thing, :with_notes, :with_description )
Thing.find(16)
response.body
system 'cls'
response.body
response
parsed_body
payload
system 'cls'
parsed_body
thing_props
thing
c
thing
things
c
thing.errors
thing.name.methods
thing.name.methods.grep /errors/
thing.name
thing.name.errors
thing.name.errors.messages
thing.errors.messages
thing.errors.full_messages
thing.errors.full_message(:name)
thing.errors.full_message :name
thing.errors.full_message
thing.errors.full_messages
thing.errors.methods
thing.errors.full_messages
thing.errors.full_message
thing.errors.message
c
thing.respond_to? :errors
thing.errors
thing[:errors]
thing.attributes[:notes]
thing.attributes[:name]
thing.attributes[:errors]
thing.attributes
thing.keys
thing.has_key? "errors"
c
v
c
thing.errors.full_messages
thing.valid?
thing.errors
thing.errors.messages
thing.errors
thing
c
account
accounts
bad_credentials
c
credentials
n
var all
c
credentials
c
credentials
c
var all
atep
step
source
show
help
account
credentials
credentials.slice(:email, :password)
c
credentials.slice(:email, :password)
credentials
credential
